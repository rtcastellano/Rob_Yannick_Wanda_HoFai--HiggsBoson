exp(1) - 2.7182
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 1
while(exp(1) - e_approx  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + fac[i]
print(e_approx)
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 1
while(exp(1) - e_approx  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + fac[i]
print(fac[i])
print(e_approx)
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 1
while(exp(1) - e_approx  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + 1/fac[i]
print(fac[i])
print(e_approx)
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 1
while(abs(exp(1) - e_approx)  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + 1/fac[i]
print(fac[i])
print(e_approx)
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 2
while(abs(exp(1) - e_approx)  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + 1/fac[i]
print(fac[i])
print(e_approx)
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 2
while(abs(exp(1) - e_approx)  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + 1/fac[i]
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 2
while(abs(exp(1) - e_approx)  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + 1/fac[i]
}
print(e_approx)
return(i)
}
find_n(.01)
range(100,1,-1)
arange(100)
pow(10,2)
10^2
1/2
1//2
as.int(1/2)
as.integer(1/2)
num_digits <- function(x) {
i = 1
while(as.integer(x/10^i) > 0)
{
i += 1
}
return(i)
}
num_digits <- function(x) {
i = 1
while(as.integer(x/10^i) > 0)
{
i = i + 1
}
return(i)
}
num_digits(1000)
num_digits(100)
num_digits(300)
num_digits(340)
990
as.integer(990/100)
as.integer(980/100)
981
as.integer(981/10)
as.integer(981/10)%%10
as.integer(981/100)*100
is_palindrome <- function(x) {
n = num_digits(x)
if(n == 1) {
return(T)
}
return((x %% 10 == as.integer(x/10^(n-1))) &
as.integer((x - as.integer(x/10^(n-1))*10^(n-1))/10))
)
is_palindrome <- function(x) {
n = num_digits(x)
if(n == 1) {
return(T)
}
return((x %% 10 == as.integer(x/10^(n-1))) &
as.integer((x - as.integer(x/10^(n-1))*10^(n-1))/10))
}
is_palindrome(989)
is_palindrome(987)
1:100
100:1
max_pal = 1
for(i in 999:1)
{
for(j in 999:1)
{
if(i*j > max_pal & is_palindrome(i*j))
max_pal = i*j
}
}
print(max_pal)
is_palindrome(994009)
is_palindrome(99409)
is_palindrome(9949)
num_digits(994009)
x = 994009
x %% 10
as.integer(x/10^(6-1))
is_palindrome <- function(x) {
n = num_digits(x)
if(n == 1) {
return(T)
}
return((x %% 10 == as.integer(x/10^(n-1))) &
is_palindrome(as.integer((x - as.integer(x/10^(n-1))*10^(n-1))/10)))
}
is_palindrome(99409)
max_pal = 1
for(i in 999:1)
{
for(j in 999:1)
{
if(i*j > max_pal & is_palindrome(i*j))
max_pal = i*j
}
}
print(max_pal)
is_palindrome(max_pal)
x = 900099
x %% 10
num_digits(x)
as.integer(x/10^(6-1))
i_digit <- function(i, x) {
as.integer(x/10^(i-1))
}
i_digit(990022123, 3)
'asdf'
nchar('asdf')
981/10
981%%10
981%%100
81 - 80
81 - 1
81/10
9876
9876%100
9876%%100
i_digit(x) <- function(x) {
x = x %% 10^i
n = num_digits(x)
return(as.integer(x/10^(num_digits(x)-1)))
}
i_digit <- function(x, i) {
x = x %% 10^i
n = num_digits(x)
return(as.integer(x/10^(num_digits(x)-1)))
}
i_digit(9876, 2)
i_digit(9876, 3)
i_digit(9876, 4)
is_palindrome <- function(x) {
n = num_digits(x)
if(n == 1) {
return(T)
}
for(i in 1:as.integer(n/2)) {
if(i_digit(x, i) != i_digit(x, n - i))
return(F)
}
return(T)
}
is_palindrome(9876)
is_palindrome(9877)
is_palindrome(9879)
is_palindrome(9889)
i_digit(9889, 1)
i_digit(9889, 2)
i_digit(9889, 3)
i_digit(9889, 4)
num_digits(9889)
is_palindrome <- function(x) {
n = num_digits(x)
for(i in 1:as.integer(n/2)) {
if(i_digit(x, i) != i_digit(x, n - i + 1))
return(F)
}
return(T)
}
is_palindrome(9889)
is_palindrome(9869)
is_palindrome(9669)
is_palindrome(96569)
PrimeFactor <- function(n, primefactors)
{
if(is.prime(n))
{
return(n)
}
i = 2
while(T)
{
if(n %% i == 0)
{
return(PrimeFactor(n/i, c(primefactor, i)))
}
i = i + 1
}
}
is_palindrome(96569)
PrimeLessN <- function(n) {
num = c(F, rep(T, n-1))
for(i in 2:sqrt(n))
{
j = 2
while(i * j <= n)
{
num[i * j] = F
j = j+1
}
}
return(which(num == T))
}
isPrime <- function(n) {
num = rep(T, n)
for(i in 2:sqrt(n))
{
j = 2
while(i * j <= n)
{
num[i * j] = F
j = j+1
}
}
return(num[n])
}
is.prime <- function(num) {
if (num == 2) {
return(TRUE)
} else if (num %% 2:(num-1) == 0) {
return(FALSE)
} else {
return(TRUE)
}
}
NUM = 600851475143
primefactors = c()
PrimeFactor <- function(n, primefactors)
{
if(is.prime(n))
{
return(n)
}
i = 2
while(T)
{
if(n %% i == 0)
{
return(PrimeFactor(n/i, c(primefactor, i)))
}
i = i + 1
}
}
PrimeFactor(100)
sqrt(600851475143)
rep(T, 775146)
c(66000006666066)
load("~/NYCDSA/Bootcamp/xgboost_jun4_8pm.RData")
importance_matrix = xgb.importance(feature_names = colnames(higgs.train.dummy), model = bst)
library(xgboost)
library(methods)
library(pROC)
library(caret)
library(xgboost)
library(readr)
library(plyr)
library(dplyr)
library(tidyr)
library(dummies)
library(doMC)
registerDoMC(cores = 4)
importance_matrix = xgb.importance(feature_names = colnames(higgs.train.dummy), model = bst)
#Predicting training data
xgmat.train <- xgb.DMatrix(as.matrix(higgs.train.dummy),
label = as.numeric(higgs.labels == "X0"),
weight = scaled.weight)
xgboostTrainPred <- predict(bst, newdata = xgmat.train)
labels <- ifelse(as.character(higgs.labels)=="X1", 1, 0)
auc = roc(labels, xgboostTrainPred)
plot(auc, print.thres=TRUE)
######## From the graph, we can tell the best threshold is 0.002
threshold <- 0.662
err <- mean(as.numeric(xgboostTrainPred >= threshold) != (higgs.labels == "X0"))
#########################
#Predicting the test data
xgmat.test <- xgb.DMatrix(as.matrix(higgs.test.dummy))
xgboostTestPred <- predict(bst, newdata=xgmat.test)
predicted <- rep("s",550000)
predicted[xgboostTestPred>=threshold] <- "b"
weightRank = rank(xgboostTestPred, ties.method= "random")
save.image("~/NYCDSA/Bootcamp/xgboost_jun4_8pm.RData")
ggplot(importance_matrix, aes(x = Feature, y = Gain)) + geom_bar()
ggplot(importance_matrix) + geom_bar(aes(x = Feature, y = Gain))
help(stat_count())
library(ggplot2)
ggplot(importance_matrix, aes(x = Feature, y = Gain)) + geom_bar()
help(stat_count)
ggplot(importance_matrix, aes(x = Feature, y = Gain)) + geom_bar(stat = "identity")
ggplot(importance_matrix, aes(x = Feature, y = Gain)) + geom_bar(stat = "identity") + coord_flip()
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) + geom_bar(stat = "identity") + coord_flip()
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) + geom_bar(stat = "identity") + coord_flip() + scale_fill_brewer()
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) + geom_bar(aes(fill = 1), stat = "identity") + coord_flip()
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) +
geom_bar(aes(fill = 1), stat = "identity") + coord_flip() +
xlab("Variable importance") + ylab("Features") + ggtitle("Variable importance for xgboost") +
guide(fill = F)
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) +
geom_bar(aes(fill = 1), stat = "identity") + coord_flip() +
xlab("Variable importance") + ylab("Features") + ggtitle("Variable importance for xgboost") +
guides(fill = F)
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) +
geom_bar(aes(fill = 1), stat = "identity") + coord_flip() +
ylab("Variable importance") + xlab("Features") + ggtitle("Variable importance for xgboost") +
guides(fill = F)
rm(list = ls())
setwd("~/NYCDSA/Bootcamp/Kaggle_Project4/centaur_kaggle")
dfTrain <- read.csv('~/NYCDSA/Bootcamp/Kaggle_Project4/data/training.csv', header=T)
dfTest <- read.csv('~/NYCDSA/Bootcamp/Kaggle_Project4/data/test.csv', header=T)
dfTrain[dfTrain==-999.0] <- 0
dfTest[dfTest==-999.0] <- 0
testId = dfTest$EventId
# Convert PRI_jet_num to factor as instructed on the website.
dfTrain$PRI_jet_num <- as.factor(dfTrain$PRI_jet_num)
dfTest$PRI_jet_num <- as.factor(dfTest$PRI_jet_num)
weight <- dfTrain$Weight
labels <- dfTrain$Label
train <- dfTrain[, -c(1,32,33)]
test <- dfTest[,-1]
#Creating 80/20 split within training data
set.seed(0)
train.index = sample(1:dim(train)[1], dim(train)[1]*.8)
val.index = -train.index
# #Removing azimuth angles Phi
# train = train[,-c(16,19,21,26,29)]
# test = test[,-c(16,19,21,26,29)]
#
# #Logging numerical variables
# for (i in c(1:22,24:30)) {
#   train[,i] = log(train[,i])
#   test[,i] = log(test[,i])
# }
#
# #Scaling numerical variables
# for (i in c(1:22,24:30)) {
#   train[,i] = scale(train[,i])
#   test[,i] = scale(test[,i])
# }
##########################
####  Build gbm model ####
##########################
library(caret)
####### Library used for parallel processing
library(doMC)
registerDoMC(cores = 4)
# Load our customized metric function.
source('helper.R')
###### Setup a 5 fold cross-validation and use AMS as the metric
ctrl = trainControl(method = "repeatedcv",number = 5, #Should be k=5 or 10
summaryFunction = AMS_summary)
#=> Update k
###### Setup grid search parameters.
gbmGrid <-  expand.grid(interaction.depth = c(4,6,8), n.trees =(2:8)*100,
shrinkage = c(0.01, 0.005, 0.001),
n.minobsinnode = c(100, 500, 2000))
#=> Tweak grid
###### Train the gbm model
m_gbm = train(x=train[train.index,], y=labels[train.index],
method="gbm", weights=weight[train.index],
verbose=TRUE, trControl=ctrl, metric="AMS")
gbmTrainPred <- predict(m_gbm, newdata=train[train.index,], type="prob")
library(pROC)
labels <- ifelse(as.character(labels)=='s', 1, 0) #To convert to 0,1 for logistic regression
auc_train = roc(labels[train.index], gbmTrainPred[,2])
auc_train$auc
plot(auc_train, print.thres=TRUE)
threshold <- 0.002
help("varImp")
varImp(m_gbm)
var.imp = varImp(m_gbm)
var.imp
class(var.imp)
names(var.imp)
var.imp$importance
var.imp$importance
class(var.imp$importance)
names(var.imp$importance)
ggplot(var.imp$importance) + geom_histogram()
ggplot(var.imp$importance) + geom_bar(aes(y = Overall))
ggplot(var.imp$importance) + geom_bar(aes(y = Overall), stat = 'identity')
var.imp$importance
labels(var.imp$importance)
labels(var.imp$importance)[[1]]
ggplot(var.imp$importance) + geom_bar(aes(x = labels(var.imp$importance)[[1]], y = Overall), stat = 'identity')
ggplot(var.imp$importance) +
geom_bar(aes(x = labels(var.imp$importance)[[1]], y = Overall), stat = 'identity') +
coord_flip()
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall)) +
geom_bar(aes(x = labels(var.imp$importance)[[1]], y = Overall), stat = 'identity') +
coord_flip()
)
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(aes(x = labels(var.imp$importance)[[1]], y = Overall), stat = 'identity') +
coord_flip()
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(), stat = 'identity') +
coord_flip()
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(, stat = 'identity') +
coord_flip()
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(stat = 'identity') +
coord_flip()
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(aes(y = Overall), stat = 'identity') +
coord_flip()
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(aes(y = Overall), stat = 'identity') +
coord_flip()  + ylab("Variable importance") + xlab("Features") +
ggtitle("Variable importance for xgboost") + guides(fill = F)
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(aes(y = Overall, fill = Overall), stat = 'identity') +
coord_flip()  + ylab("Variable importance") + xlab("Features") +
ggtitle("Variable importance for xgboost") + guides(fill = F)
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(aes(y = Overall, fill = x), stat = 'identity') +
coord_flip()  + ylab("Variable importance") + xlab("Features") +
ggtitle("Variable importance for xgboost") + guides(fill = F)
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(aes(y = Overall, fill = labels(var.imp$importance)[[1]]), stat = 'identity') +
coord_flip()  + ylab("Variable importance") + xlab("Features") +
ggtitle("Variable importance for xgboost") + guides(fill = F)
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(aes(y = Overall, fill =reorder(x = labels(var.imp$importance)[[1]], Overall)),
stat = 'identity') +
coord_flip()  + ylab("Variable importance") + xlab("Features") +
ggtitle("Variable importance for xgboost") + guides(fill = F)
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(aes(y = Overall, fill = labels(var.imp$importance)[[1]]), stat = 'identity') +
coord_flip()  + ylab("Variable importance") + xlab("Features") +
ggtitle("Variable importance for xgboost") + guides(fill = F)
ggplot(var.imp$importance, aes(reorder(x = labels(var.imp$importance)[[1]], Overall))) +
geom_bar(aes(y = Overall, fill = labels(var.imp$importance)[[1]]), stat = 'identity') +
coord_flip()  + ylab("Variable importance") + xlab("Features") +
ggtitle("Variable importance for gbm") + guides(fill = F)
